#include	<system_stm32f4xx.c>
#include 	<stdio.h>

int counter_CH0;
int counter_CH1;
int counter_static_CH0;
int counter_static_CH1;
int prescaler;
long core_clock_CH0;
long core_clock_CH1;
long Timer_Frequency = 1000000;										//1 Mhz
long Strobe_Frequency = 1000;
char counterBuff[16];

void TextOut(const char *str)											//ITM Stimulus port 0 -> 1-be
{
	do {
		if(*str=='\n') ITM_SendChar('\r');
		ITM_SendChar(*str);														//ITM Send char printf helyett
	} while (*str++);
}

void LED_Init(void)
{
		//LED init PD12
			GPIOD	->	MODER			|=	(1<<24);						//PD12 = output
			GPIOD ->	OTYPER		&=	(1<<12);						//Output Push/pull
			GPIOD ->	OSPEEDR		&=	~(3<<24);						//50Mhz fast speed
			GPIOD ->	OSPEEDR		|=	(2<<24);		
			GPIOD ->	PUPDR			&=	~(3<<24);						//PD12 pull up
			GPIOD	->	PUPDR			|=	(1<<24);
		//LED init PD12	

		//LED init PD14
			GPIOD	->	MODER			|=	(1<<28);						//PD12 = output
			GPIOD ->	OTYPER		&=	(1<<14);						//Output Push/pull
			GPIOD ->	OSPEEDR		&=	~(3<<28);						//50Mhz fast speed
			GPIOD ->	OSPEEDR		|=	(2<<28);		
			GPIOD ->	PUPDR			&=	~(3<<28);						//PD12 pull up
			GPIOD	->	PUPDR			|=	(1<<28);
		//LED init PD14	
	
		//LED init PD13
			GPIOD	->	MODER			|=	(1<<26);						//PD12 = output
			GPIOD ->	OTYPER		&=	(1<<13);						//Output Push/pull
			GPIOD ->	OSPEEDR		&=	~(3<<26);						//50Mhz fast speed
			GPIOD ->	OSPEEDR		|=	(2<<26);		
			GPIOD ->	PUPDR			&=	~(3<<26);						//PD12 pull up
			GPIOD	->	PUPDR			|=	(1<<26);
		//LED init PD13
}

void TIM5_IRQHandler(void)
{
	TIM5->CR1 &=~(1<<0);
	NVIC->ICPR[1] 			|= (1<<18);								//Clear the Pending Interrupt
	NVIC->ICER[1] 			|= (1<<18);								//Disable this interrupt during processing
	ITM_SendChar('t');
	ITM_SendChar('\n');
	GPIOD -> 	ODR 		^= 	(1<<13);							//Piros led kikapcsol
	TIM5->CNT = 0;
	TIM5->SR = 0;
	TIM5->CR1 |=(1<<0);
	NVIC->ISER[1] |= (1 << 18);										//Reenable the EXTI0 Interrupt
}

void EXTI1_IRQHandler(void)__irq
{
		TIM2	->	CR1				&=	~(1<<0);							//Timer Disable
		//GPIOD -> 	ODR 			&= 	~(1<<14);							//Piros led kikapcsol
		NVIC->ICPR[0] 			|= (1<<7);								//Clear the Pending Interrupt
		NVIC->ICER[0] 			|= (1<<7);							//Disable this interrupt during processing
			//Itt fogsz azt csinálni amit szeretnél
		EXTI->PR 	|= (1<<1);													//Pending request clear
		//GPIOD -> ODR ^= (1<<12);											//Zold led felkapcsol megszakításonként
		counter_CH1 = TIM2->CNT;													//STM Studio debughoz
		core_clock_CH1 = ((SystemCoreClock/2)/TIM2->CNT);
		TIM2	->	CNT = 0;
		//TIM2	->	EGR		|=	(1<<0);										//Reset timer
		TIM2	->	SR		=	0;													//Clear UIF bit
		/*
		sprintf(counterBuff, "%2d", counter);					//számláló kiírása a konzolra
		TextOut(counterBuff);
		ITM_SendChar('\n');
		*/
		TIM2	->	CR1				|=	(1<<0);								//Timer Enable
		NVIC->ISER[0] |= (1 << 7);										//Reenable the EXTI0 Interrupt
}
void EXTI0_IRQHandler(void)__irq
	{
		TIM2	->	CR1				&=	~(1<<0);							//Timer Disable
		NVIC->ICPR[0] 			&= ~(1<<6);								//Clear the Pending Interrupt
		NVIC->ICER[0] 			&= ~(1<<6);								//Disable this interrupt during processing
			//Itt fogsz azt csinálni amit szeretnél
		EXTI->PR 	= 0;																//Pending request clear
		counter_CH0 = TIM2->CNT;											//STM Studio debughoz
		core_clock_CH0 = ((SystemCoreClock/2)/TIM2->CNT);
		TIM2	->	CNT				= 0;
		TIM2	->	SR				=	0;													//Clear UIF bit
		TIM2	->	CR1				|=	(1<<0);								//Timer Enable
		NVIC->ISER[0] 			|= (1 << 6);										//Reenable the EXTI0 Interrupt
	}

int	main (void)
	{	//RCC init
			RCC		->	AHB1ENR		|=	(1<<0);							//Enable PortA
			RCC		-> 	AHB1ENR		|=	(1<<1);							//Enable PortB
			RCC		->	AHB1ENR		|=	(1<<3);							//Enable PortD
			RCC		->	APB1ENR		|=	(1<<0);							//Enable Timer2 clock
			RCC		->	APB1ENR		|=	(1<<3);							//Enable Timer5 clock
		
		//Timer2 init	PA1 EXTI1
			prescaler = ((SystemCoreClock/2)/Timer_Frequency)-1;
			TIM2	->	PSC				=	prescaler;						//Prescaler 840
			EXTI->IMR 		|= (1<<1);										//Interrupt mask register
			EXTI->PR 			|= (1<<1);										//Pending request
			EXTI->FTSR 		|= (1<<1);										//Falling Trigger selection register
			NVIC->ISER[0] |= (1<<7);										//Set enable 
			NVIC->ICPR[0] |= (1<<7);										//Clear pending (fake) if needed
		//
		
		/*Timer5 init PB0	EXTI0	
			prescaler = ((SystemCoreClock/2)/Timer_Frequency)-1;
			TIM5	->	PSC 			= prescaler;	
			EXTI->IMR			|= 	(1<<0);
			EXTI->PR			|=	(1<<0);
			EXTI->FTSR 		|= 	(1<<0);										//Falling Trigger selection register
			NVIC->ISER[0] |= 	(1<<6);										//Set enable 
			NVIC->ICPR[0] |= 	(1<<6);										//Clear pending (fake) if needed
		*/
		
		//PA1 init
			//GPIOA	->	MODER			&=	~(3<<3);						//PD12 = output
			//GPIOA	->	MODER			|=	(1<<3);
			//GPIOA ->	OTYPER		|=	(1<<1);							//Output Push/pull
			//GPIOA ->	OSPEEDR		&=	~(3<<2);						//50Mhz fast speed
			//GPIOA ->	OSPEEDR		|=	(2<<2);		
			//GPIOA ->	PUPDR			&=	~(4<<1);						//PD12 pull up
			//GPIOA	->	PUPDR			|=	(2<<1);
		//
		
			LED_Init();
			
		//EXTI0 interrupt PB0
		/*	
			EXTI->IMR 	|= (1<<0);											//Interrupt mask register
			//EXTI->RTSR 	|= (1<<0);											//Rising Trigger selection register
			EXTI->PR 	|= (1<<0);												//Pending request
			EXTI->FTSR 	|= (1<<0);										  //Falling Trigger selection register
			NVIC->ISER[0] |= (1<<6);										//Set enable 
			NVIC->ICPR[0] |= (1<<6);										//Clear pending (fake) if needed
		*/
		
		//Timer enable
			TIM2	->	CR1				|=	(1<<0);							//Timer2 Enable
			TIM5	->	CR1 			|=	(1<<0);								//TIMER5 enable
			
			while (1)
			{
				if ( TIM2 -> SR & 1)											//Ha a TIMER2 túlcsordul, piros led felkapcsol
				{
					GPIOD -> ODR |= (1<<14);								
					
				}
				//counter_static = (TIM2->CNT/1000);					//debug: STM Studiohoz
			}
}//main
